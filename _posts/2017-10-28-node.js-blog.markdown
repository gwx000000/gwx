---
layout: post
title: Node.js+MongoDB博客
date: 2017-10-28 00:00:00 +0300
description: Node.js+MongoDB # Add post description (optional)
img: node-logo.jpeg # Add image post (optional)
tags: [Node, Blog, MongoDB] # add tag


---
### 1.项目初始化
>$ npm init

### 2.安装模块
```
express、body-parser、cookies、markdown、mongoose、swig
```

>$ npm install express body-parser cookies markdown mongoose swig --save

### 3.创建文件目录

```js
db //文件库存储目录
models //数据库模型目录
node_modules //node第三方模块目录
public //公共文件目录（css、js、images）
router //路由文件目录
schemas //数据库结构文件（schema）目录
views //模板视图文件目录
app.js //应用启动（入口）文件
package.json //node第三方模块版本记录
```

### 4.应用创建

- 创建应用、监听端口

```js
//加载express模块
var express = require('express');
//创建app应用 => NodeJs中的Http.createSever();
var app = express();

//监听http请求
app.listen(9527);
```
- 用户的访问
  - 用户通过URL访问web应用
  - web后端根据用户访问的URL处理不同的业务逻辑


### 5.处理请求输出
- 路由绑定
通过app.get()或app.post()等方法可以把一个url路径和一个或N个函数进行绑定

```js
app.get('/',function(req,res,next){})
//req:request对象 -保存客户端请求相关的一些数据
//res:reponse对象 -服务端输出对象，提供了 一些服务端输出相关的方法 http.response
//next:方法，用于执行下一个和路径匹配的函数
```
- 内容输出
  - 通过res.send(string)发送内容至客户端


### 6.使用模板

- 模板的使用
    - 后端逻辑和页面表现分离 （前后端分离）

- 模板的配置

```js
//引入swigswig模板处理模块
var swig = require('swig');
//定义当前应用所使用的模板引擎
//第一个参数：模板引擎的名称，同时也是模板文件的后缀，第二个参数表示用于解析处理模板内容的方法
app.engine('html',swig.renderFile);
//设置模板文件存放目录,第一个参数必须是views,第二个是目录参数
app.set('views','./views');
//注册所使用的模板引擎，第一个参数必须是view engine，第二个参数和app.engine这个方法中定义的模板引擎名称（第一个参数）一致
app.set('view engine','html')
```
- 模板渲染

```js
/**
* 读取views目录下的指定文件，解析并返回给客户端
* 第一个参数：表示模板的文件，相对于views目录 views/index.html
* 第二个参数：传递给模板使用的数据
*/
res.render('index');
//注：为了性能考虑，app应用去读取模板的时候，它会读取到模板并解析，然后保存到内存当中
//当下一次访问同样的模板不会再次解析，而是读取已经存在内存中的内容

//在开发过程中，需要取消模板缓存
swig.setDefaults({cache:false});
```

### 7.静态文件托管
一般情况下，例如引入一个CSS文件

```js
<link rel="stylesheet" href="main.css" />

app.get('/main.css',function(req,res,next){
	res.setHeader('content-type','text/css')
	//默认识别为html，必须设置请求头，否则不被识别为css
	res.send("body{background:blue}")
})
```
如果有N个CSS，那就要写N个路由。因为CSS是一个静态文件，不需要动态内容，所以只需要原封不动发送给前端即可

```js
app.use('/public',express.static(__dirname+'/public'));
//当用户访问的url以/public开始，那么直接返回__dirname+'/public'下的文件
```
#### 小结

```
用户发送http请求 -> url -> 解析路由 -> 找到匹配的规则 -> 执行指定的绑定函数，返回对应内容至用户

/public -> 静态 -> 直接读取指定目录下文件，返回给用户
 	   动态 -> 处理业务逻辑，加载模板，解析模板 -> 返回数据给用户
```

### 8.划分模块
- 模块划分
    - 前台模块
    - 后台管理模块
    - API模块

使用app.use()进行模块划分

```js
app.use('/admin',require('./routers/admin'));
app.use('/api',require('./routers/api'));
app.use('/',require('./routers/main'));
```
#### 前台路由+模板
- main模块
    - / 首页
    - /view 内容页

- api模块
    - / 首页
    - /register 用户注册
    - /login 用户登录
    - /comment 评论获取
    - /comment/post 评论提交

- admin模块
    - / 首页

    - 用户管理
        - /user 用户列表
    - 分类管理
        - /category 分类列表
        - /category/add 分类添加
        - /category/edit 分类修改
        - /category/delete 分类删除
    - 文章管理
        - /article 内容列表
        - /article/add 内容添加
        - /article/edit 内容修改
        - /article/delete 内容删除
    - 评论内容管理
        - /comment 评论列表
        - /comment/delete 评论删除

### 功能开发顺序
- 功能模块开发顺序
    - 用户
    - 栏目
    - 内容
    - 评论
- 编码顺序
    - 通过Schema定义设计数据存储结构
    - 功能逻辑
    - 页面展示

    为了方便数据处理，要先做后台管理模块，因为添加、修改数据等操作需要有一个后台功能，在数据产生之后再做前台展示。

### 用户注册
- UserSchema结构设计
- 注册页面
- 注册逻辑
    - 使用ajax方式实现注册
    api接口编写

### mongoDB数据库连接
数据结构处理使用MongoDB
>https://www.mongodb.com

在mongoDB官网选择下载安装，具体教程可以看[笔记下方](http://note.youdao.com/noteshare?id=2165cc713d9d0ae71c673a0794211702)（Mac版）

- 安装完成开启数据库
>$ mongod --dbpath db(db是数据文件保存路径)

```js
/*app.js*/
//加载mongoose模块
var mongoose = require('mongoose');
//连接数据库
mongoose.connect('mongodb://localhost:27017/blog',function(err){
	if(err){
		console.log("数据库连接失败");
	}else{
		console.log("数据库连接成功");
	}
});
```

- 定义用户表结构

```js
/*schemas/users.js*/
//exports暴露出去
module.exports = new mongoose.Schema({
	//用户名
	username: String,
	//密码
	password: String
})
```

Schema代表数据库中的存储结构，一个Schema代表数据库中的一个表。数据结构是通过mongoose下的Schema方法的构造函数创建出来的对象，对象当中某一个属性代表数据中当中的某一个字段，后面的代表该字段的存储类型。

- 创建数据模型类

```js
/*models.js*/
var mongoose = require('mongoose');
var usersSchema = require('../schemas/users');
module.exports = mongoose.model('User',usersSchema);
```

在实际使用当中，我们并不直接操作表结构，而是定义一个model模型类，通过操作模型来对数据进行增删改查。

- bodyParser设置

bodyParser中间件，用来处理post提交过来的数据。
```js
/*app.js*/
//加载body-parser模块
var bodyParser = require('body-parser');
app.use( bodyParser.urlencoded({extended: true}));
```

通过模块不用直接操作数据库，而是像操作对象一样操作数据库。

```.``` 类方法，静态方法、
```#``` 对象方法

- 数据库验证

```js
/*api.js*/
var User = require('../models/User');
//数据库验证：
	//用户名是否已经被注册了，如果数据库中已经存在和我们要注册的用户名同名的数据，表示该用户名已经被注册了。
	User.findOne({
		username: username
	}).then(function(userInfo) {
		if (userInfo){
			//表示数据库中有该记录
			responseData.code = 4;
			responseData.message = '用户名已经被注册了';
			res.json(respoenseData);
			return;
		}
		//保存用户注册的信息到数据库中
		var user = new User({
			username: username,
			password: password
		});
		return user.save();
	}).then(function(newUserInfo) {
		console.log(newUserInfo);
		responseData.message = '注册成功';
		res.json(responseData);
	});
```

### 用户登录
```js
//查询数据库中相同用户名和密码的记录是否存在，如果存在则登录成功
	 User.findOne({
		 username: username,
		 password: password
	 }).then(function(userInfo) {
		 if(!userInfo) {
			 responseData.code = 2;
			 responseData.message = '用户名或密码错误';
			 res.json(responseData);
			 return;
		 }
		 //用户名和密码是正确的
		 responseData.message = '登录成功';
		 res.json(responseData);
		 return;
	 })
})
```
### 使用cookie保存用户
登录成功之后页面刷新就回到初始页面，登录状态并没有保存下来，这里使用cookie保存用户状态。
```js
/*app.js*/
//加载cookies模块
var Cookies = require('cookies');
//用户每次访问站点，都会走中间件
//设置cookie
app.use(function(req,res,next){
	req.cookies = new Cookies(req,res);
})

/*api.js*/
req.cookies.set('userInfo',JSON.stringify({
	 _id: userInfo._id,
	 username:userInfo.username
 }));
//发送一个cookie信息给浏览器，浏览器得到信息会保存起来，以后只要访问站点，每次都会通过头信息的方式发送给服务端，服务端通过这个cookie信息来验证是否为登录状态

```

```js
/*app.js*/
app.use(function(req,res,next){
	req.cookies = new Cookies(req,res);
	//解析登录用户cookie信息
	req.userInfo = {};
	if(req.cookies.get('userInfo')){
		//try方法处理异常
		try{
			req.userInfo = JSON.parse(req.cookies.get('userInfo'));
		}catch(e){

		}
	}
	next();
})
```
记住登录状态使用swig模板实现

{% raw %}
    {% if userInfo._id %}
	<div class="rightBox" id="userInfo" ></div>
	{% else %}
	<div class="rightBox"id="loginBox"></div>
	{% endif %}
{% endraw %}

```js
router.get('/',function(req,res,next){
	res.render('main/index',{
		//变量分配给模板使用
		userInfo: req.userInfo
	});
})
```
退出功能，将cookie干掉

```js
/*index.js*/
$('#logout').on('click',function() {
		$.ajax({
			url: '/api/user/logout',
			success: function(result) {
				if(!result.code){
					window.location.reload();
				}
			}
		});
	});
});
/*api.js*/
//退出
router.get('/user/logout',function(req,res) {
	req.cookies.set('userInfo',null);
	res.json(responseData);
})
```
### 管理员
验证是否为管理员最后不要保存在cookie当中，因为我们要实时的验证用户是否是管理员

```js
/*main.js*/
//获取当前登录用户的类型，是否是管理员
			User.findById(req.userInfo._id).then(function(userInfo) {
				req.userInfo.isAdmin = Boolean(userInfo.isAdmin);//转换为布尔值
				next();//调用next();
			})
/*users.js*/
    module.exports = new mongoose.Schema({
	//用户名
	username: String,
	//密码
	password: String,
	//是否为管理员
	isAdmin: {
		type : Boolean,
		default: false
	}
})
//在Schema添加isAdmin数据结构。
```
判断是否为管理员后为其渲染相应的页面

```js
/*admin.js*/
router.use(function(req,res,next) {
	if(!req.userInfo.isAdmin) {
		//如果当前用户非管理员
		res.send('对不起，您没有权限进入后台管理');
		return
	}
	next();
})
router.get('/',function(req,res,next) {
	res.render('admin/index',{
		userInfo: req.userInfo
	})
})
```
渲染页面使用siwg模板继承，复用

```js
/*layout.html*/
{% raw %}
{%block main%}{%endblock%}
{% endraw %}
//定义一个block块，起占位作用。

/*admin.html*/
{% raw %}
{% extends 'layout.html' %}
{% endraw %}
//复用layout.html页面
{% raw %}
{%block main%}
{% endraw %}
```
```html
<div class="jumbotron">
<h1>Hello, {{userInfo.username}}!</h1>
<p>你已进入后台管理</p>
{% raw %}
{%endblock%}
{% endraw %}
```
相对于面向对象当中的继承，重写block模块

### 用户管理

```js
/*admin.js*/
//用户管理
router.get('/user',function(req,res) {
	//从数据库中读取所有的用户数据
	User.find().then(function(users) {
		res.render('admin/user_index',{
			userInfo: req.userInfo,
			//传递User信息给用户模板
			users: users
		});
	});
});
```
- 用户信息展示

```html
<table class="table table-hover table-striped">
	<tr>
		<th>ID</th>
		<th>用户名</th>
		<th>密码</th>
		<th>管理员权限</th>
	</tr>
	{% raw %}
	{% for user in users %}
	{% endraw %}
	<tr>
		<td>{{user._id.toString()}}</td>
		<td>{{user.username}}</td>
		<td>{{user.password}}</td>
		<td>
	{% raw %}
		{%if user.isAdmin%}
		true
		{% else %}
		false
		{% endif %}
	{% endraw %}
		</td>
	</tr>
	{% raw %}
	{% endfor %}
	{% endraw %}
</table>
```
- 对用户数据分页展示

实际数据中，一般会有很多条，为了方便管理，通常对数据进行分页的展示。

```js
router.get('/user',function(req,res) {
	//从数据库中读取所有的用户数据
	//limit(Number): 限制获取的数据条数
	//skip(Numbser): 忽略数据的条数

	/**
	 * 1.每页显示n条数据 skip:0 ->(当前页-1) * limit
	 * 2.需要忽略n条数据 skip: n
	 */

	var page = Number(req.query.page || 1);//用户不传值，默认为第一页
	var limit = 10;
	var skip = (page - 1) * limit;
	User.find().limit(limit).skip(skip).then(function(users) {
		res.render('admin/user_index',{
			userInfo: req.userInfo,
			//传递User信息给用户模板
			users: users,
			//传递page给模板
			page: page
		});
	});
});
```
- 计算数据条数

首先查询数据库数据总条数，然后限制取值范围，最后在模板总引用并展示给用户。

```js
/*查询数据库数据总条数 */
User.count().then(function(count){
		console.log(count);
		//计算总页数
		var pages = Math.ceil(count/limit);
		//取值不能超过pages
		page = Math.min(page,pages);
		//取值不能小于1
		page = Math.max(page,1);
	});
```
- 添加分类功能

首先添加分类的Schema表结构

```js
/*categories.js*/

//引入mongoose
var mongoose = require('mongoose');
//分类的表结构
module.exports = new mongoose.Schema({
	//分类名称
	name: String
})
```
然后创建一个模型

```js
/*models*/
var mongoose = require('mongoose');
var categoriesSchema = require('../schemas/categories');
module.exports = mongoose.model('User',categoriesSchema);
/*admin.js*/
//引入分类模型
var Category = require('../models/Category');
```
判断是否存在分类名称,存在则渲染error页面，不存在则保存。
```js
	//数据库中是否已经存在名称
	Category.findOne({
		name: name
	}).then(function(rs){
		if(rs){
			//数据库中已经存在该分类了
			res.render('admin/error',{
				userInfo: req.userInfo,
				message: '分类已经存在了'
			})
			return Promise.reject();
		} else {
			//数据库中不存在该分类，可以保存
			return new Category({
				name: name
			}).save();
		}
	}).then(function(newCategory) {
		res.render('admin/success',{
			userInfo: req.userInfo,
			message: '分类保存成功',
			url: '/admin/category'
		});
	})
});
```

- 创建分类首页

```js
router.get('/category',function(req,res) {
	var page = Number(req.query.page || 1);
    var limit = 10;
    var pages = 0;

    Category.count().then(function(count) {
        //计算总页数
        pages = Math.ceil(count / limit);
        //取值不能超过pages
        page = Math.min( page, pages );
        //取值不能小于1
        page = Math.max( page, 1 );
        var skip = (page - 1) * limit;
		Category.find().limit(limit).skip(skip).then(function(categories) {
			res.render('admin/category_index',{
				userInfo: req.userInfo,
				//传递User信息给用户模板
				categories: categories,
				//传递总条数
				count: count,
				//传递页数
				limit: limit,
				//传递总页数
				pages: pages
			});
		});
	});
});
```

- 分类修改页

```js
//分类修改
router.get('/category/edit',function(req,res) {
	//获取要修改的分类的信息,并且用表单的形式展现出来
	var id = req.query.id || '';
	//获取要修改的分类信息
	Category.findOne({
		_id: id
	}).then(function(category) {
		if(!category) {
			res.render('admin/error',{
				userInfo: req.userInfo,
				message: '分类信息不存在'
			});
			return Promise.reject();
		} else {
			res.render('admin/category_edit',{
				userInfo: req.userInfo,
				category: category
			})
		}
	})
})
```

- 分类修改保存页
分类的保存，1.首先要获取post提交过来的名称，然后获取要修改的分类信息，此时分两种情况判断

第一种情况是用户没有做任何修改提交时，默认渲染修改成功页面
```js
//当用户没有做任何的修改提交的时候
if (name == category.name) {
	res.render('admin/success',{
		userInfo: req.userInfo,
		message: '修改成功',
		url: '/admin/category'
	});
	return Promise.reject();
}else{
	//要修改的分类名称是否已经在数据库中存在
	return Category.findOne({
		//$ne表示不相等
		_id: {$ne: id},
		name: name
	});
}
```


第二种情况也细分为两种，分别是1.数据库中已经存在相同的分类名称
```js
	if(sameCategory) {
			res.render('admin/error',{
				userInfo: req.userInfo,
				message: '已经存在同名分类'
			});
			return Promise.reject();
		} else {
			return Category.update({
				_id: id
			},{
				name: name
			});
		}
```
2.是数据库中没有相同的分类名称，则修改成功
```js
res.render('admin/success',{
			userInfo: req.userInfo,
			message: '修改成功',
			url: '/admin/category'
		});
```

- 分类的删除

这一步相对简单,容易处理
```js
router.get('/category/delete',function(req,res) {
	//获取要删除的分类的id
	var id = req.query.id || '';
	Category.remove({
		_id: id
	}).then(function() {
		res.render('admin/success',{
			userInfo: req.userInfo,
			message: '删除成功',
			url: '/admin/category'
		});
	});
});
```
到这里分类页面的增删改查就已经完成了。

### 内容页面
- 内容添加页面

```js
router.get('/content/add',function(req,res) {
	//sort排序
	Category.find().sort({_id: -1}).then(function(categories) {
		res.render('admin/content_add',{
			userInfo: req.userInfo,
			categories: categories
		});
	});
});
```
渲染完添加页面后，判断内容分类与内容标题是否为空，不为空就保存到数据库中。


```js
//创建Schema模型
/*admin.js*/
var Content = require('../models/Content');

//内容保存
router.post('/content/add',function(req,res) {
	console.log(req.body);
	if(req.body.category == ''){
		res.render('admin/error',{
			userInfo: req.userInfo,
			message: '内容分类不能为空'
		})
		return;
	}

	if(req.body.title == ''){
		res.render('admin/error',{
			userInfo: req.userInfo,
			message: '内容标题不能为空'
		})
		return;
	}
	//保存数据到数据库
})
```
