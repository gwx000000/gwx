---
layout: post
title: ES6与ES5写法的区别
date: 2018-2-2 00:00:00 +0300
description: ES6 # Add post description (optional)
img: es6.jpg # Add image post (optional)
tags: [JS, ES6, ES5] # add tag
---

- 引入模块

在ES5里，使用CommonJS标准 引入React包 时，基本通过require

```
//ES5
var React = require("react-native");
//引用不同的React Native组件
var {
    Image,
    Text,
    PropTypes
} = React;
```

在ES6里，import写法更为标准和清晰
```
//ES6
import React, {
    Image,
    Text,
    PropTypes
} from 'react-native';
```
在React Native里，import直到0.12以上的版本 才能正常运作

- 导出单个类

ES5:```module.exports```,
```
module.exports = MyComponent;
```
ES6:```export default```
```
export default class MyComponent extends React.Component{
    ...
}
```

- 定义组件
ES5: ```React.createClass```
```
//ES5
var Photo = React.createClass({
    render: function() {
        return (
            <Image source={this.props.source} />
        );
    },
});
```
ES6:```React.Component```
```
//ES6
class Photo extends React.Component {
    render() {
        return (
            <Image source={this.props.source} />
        );
    }
}
```

- 给组件定义方法

##### 不再用 ```funName: function(){} ```
```
//ES5
var Photo = React.createClass({
    componentWillMount: function(){

    },
    render: function() {
        return (
            <Image source={this.props.source} />
        );
    },
});
```
##### 直接用 ```funName(){}```
```
//ES6
class Photo extends React.Component {
    componentWillMount() {

    }
    render() {
        return (
            <Image source={this.props.source} />
        );
    }
}
```
方法末尾不能有逗号

- 定义组件的属性类型和默认属性

在 ES5 里，属性类型和默认属性分别通过`propTypes`成员和`getDefaultProps`方法来实现
```
//ES5
var Video = React.createClass({
    getDefaultProps: function() {
        return {
            autoPlay: false,
            maxLoops: 10,
        };
    },
    propTypes: {
        autoPlay: React.PropTypes.bool.isRequired,
        maxLoops: React.PropTypes.number.isRequired,
        posterFrameSrc: React.PropTypes.string.isRequired,
        videoSrc: React.PropTypes.string.isRequired,
    },
    render: function() {
        return (
            <View />
        );
    },
});
```

在 ES6 里，可以统一使用 `static` 成员来实现
```
//ES6
class Video extends React.Component {
    static defaultProps = {
        autoPlay: false,
        maxLoops: 10,
    };  // 注意这里有分号
    static propTypes = {
        autoPlay: React.PropTypes.bool.isRequired,
        maxLoops: React.PropTypes.number.isRequired,
        posterFrameSrc: React.PropTypes.string.isRequired,
        videoSrc: React.PropTypes.string.isRequired,
    };  // 注意这里有分号
    render() {
        return (
            <View />
        );
    } // 注意这里既没有分号也没有逗号
}
```

- 初始化状态(state)

```
//ES5
var Video = React.createClass({
    getInitialState: function() {
        return {
            loopsRemaining: this.props.maxLoops,
        };
    },
})
```
ES6下，有两种写法，我们更推荐后一种写法 在构造函数中初始化（这样你还可以根据需要做一些计算）这样也会更容易理解，代码如下：
```
//ES6写法1
class Video extends React.Component {
    state = {
        loopsRemaining: this.props.maxLoops,
    }
}

//ES6写法2（推荐这种写法）
class Video extends React.Component {
    constructor(props){
        super(props);
        this.state = {
            loopsRemaining: this.props.maxLoops,
        };
    }
}
```

- 回调

在ES5下，`React.createClass`会把所有的方法都bind一遍，这样可以提交到任意的地方作为回调函数，而this不会变化。但官方现在逐步认为这反而是不标准、不易理解的

在ES6下，你需要通过bind来绑定this引用，或者使用箭头函数（它会绑定当前scope的this引用）来调用

```
//ES6
class PostInfo extends React.Component {
    handleOptionsButtonClick(e){
        this.setState({showOptionsModal: true});
    }
    render(){
        return (
            <TouchableHighlight
                onPress={this.handleOptionsButtonClick.bind(this)}
                onPress={e=>this.handleOptionsButtonClick(e)}
                >
                <Text>{this.props.label}</Text>
            </TouchableHighlight>
        )
    },
}
```
- 箭头函数
箭头函数实际上是在这里定义了一个临时的函数，箭头函数的箭头=>之前是一个空括号、单个的参数名、或用括号括起的多个参数名，而箭头之后可以是一个表达式（作为函数的返回值），或者是用花括号括起的函数体（需要自行通过return来返回值，否则返回的是undefined）

```
// 箭头函数的例子
()=>1
v=>v+1
(a,b)=>a+b
()=>{
    alert("foo");
}
e=>{
    if (e == 0){
        return 0;
    }
    return 1000/e;
}
```
需要注意的是，不论是bind还是箭头函数，每次被执行都返回的是一个新的函数引用，因此如果你还需要函数的引用去做一些别的事情（譬如卸载监听器），那么你必须自己保存这个引用
```
// 错误的做法
class PauseMenu extends React.Component{
    componentWillMount(){
        AppStateIOS.addEventListener('change', this.onAppPaused.bind(this));
    }
    componentDidUnmount(){
        AppStateIOS.removeEventListener('change', this.onAppPaused.bind(this));
    }
    onAppPaused(event){
    }
}

// 正确的做法！
class PauseMenu extends React.Component{
    constructor(props){
        super(props);
        this._onAppPaused = this.onAppPaused.bind(this);
    }
    componentWillMount(){
        AppStateIOS.addEventListener('change', this._onAppPaused);
    }
    componentDidUnmount(){
        AppStateIOS.removeEventListener('change', this._onAppPaused);
    }
    onAppPaused(event){
    }
}
```
```
// 正确的做法
class PauseMenu extends React.Component{
    componentWillMount(){
        AppStateIOS.addEventListener('change', this.onAppPaused);
    }
    componentDidUnmount(){
        AppStateIOS.removeEventListener('change', this.onAppPaused);
    }
    //把方法直接作为一个arrow function的属性来定义，初始化的时候就绑定好了this指针
    onAppPaused = (event) => {
    }
}
```

- Mixins

在ES5下，我们经常使用mixin来为我们的类添加一些新的方法，譬如 `PureRenderMixin`，示例如下：

```
var PureRenderMixin = require('react-addons-pure-render-mixin');
React.createClass({
  mixins: [PureRenderMixin],

  render: function() {
    return <div className={this.props.className}>foo</div>;
  }
});
```
