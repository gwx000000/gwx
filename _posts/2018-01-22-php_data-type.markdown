---
layout: post
title: PHP数据类型与基本使用方法
date: 2018-01-12 00:00:00 +0300
description: PHP # Add post description (optional)
img:  # Add image post (optional)
tags: [PHP, DATA, TYPE] # add tag

---

- PHP官网
> www.php.net

- 打印PHP信息（测试）
```
phpinfo();//系统函数
```

- php文件理论上可以放在项目的任意位置

- php文件后缀名是```.php```


### php代码怎么写？

1.php的标记符以```<?php```开始，以```?>```结束。
php标记符以外的代码都是html代码

2.php向页面输出内容 用```echo```。
    echo 可以输出数据**基础类型**的数据。

3.尾部的分号'```;```'（指令分隔符）是表示一条语句的结束，同C或Perl一样，需要用分号结束命令

### php注释
- 单行注释

```
//注释内容

#注释内容

```


- 多行注释

```
/*
*注释内容
*/
```

- php可以像页面输出html标签

```
echo '<b> name </b>'
```

### php变量
- 以`$`为关键字,`$`后面跟着变量名

- 用`=`来给变量赋值；

- 变量名要语义化，要有意义，工作中用到‘驼峰命名’；`$userName`

- 变量名首位必须**以字母或下划线开头**

- 主体位数字字母下划线；

- 等号就是赋值过程 ($名) = (值)。

- php不用声明变量，直接命名赋值即可。也不用定义数据类型；




#### 变量的基础操作
- 取值
    - 任何使用一个变量并需要获取变量值的场合；
    - ```echo $变量名;```

- 赋值
    - 在等号左边出现的时候就是赋值过程
    - ```$name = 'user';```

- 判断 isset
    - 用到系统函数 ```isset()```;
    - ```isset()```用于判断一个变量是否存在;
    - 存在返回```1``` ， 不存在返回```''```(空);
    - 官方给出返回布尔值

- 删除 unset
    - ```unset()```;
    - 断开变量跟其所引用的数据之间的关系

### 常量
- 如果很多地方都会用到同样的数据 那么就合适定义常量；

    ```
    define(变量名,'值');
    define(name,'zhangsan');
    //输出
    echo 变量名
    ```
- 常量名不用$ 也不用加引号

- 常量的范围是全局的，不去分作用域，可以在脚本的任何地方访问；

**注意： 常量值必须是标量类型；**

### 数据类型

php中共**九种**数据类型

`var_dump()`可以将变量的数据类型一同打印到页面上，可以传多个值

（标量类型，基础类型）    
- 布尔类型（true/false）
- 浮点型 float（注意精度）
- 整形 int (number)
- 字符串 string (在引号里的数据)

（复合类型，复杂类型）
- 数组 array()
    - 创建数组    
        - 利用```array()```关键字或者```[]```
    - 索引数组
        - 下标从0开始记
    - 关联数组
        - 取值用$数组名[键名]
        - 定义键名必须是字符串或数字
        - 键值可以是任何数据类型

    - 数组的简单操作
        - 取值（查） ，$arr[下标/键名]
        - 赋值（增） ，直接利用下标赋值 $arr[下标/键名] = '值'
        - 修改 ，直接利用下标赋值修改值内容
        - 删除 ，利用系统函数unset($arr[下标/键名])

- 对象

	```php
	    //创建对象
	    class className{
	        function fuName($a) {
	            echo $a;
	        }
	    }
	    //实例化 new
	    $claName = new className();
	    //调用对象方法
	    $claName->fuName('name')
	```
    - 创建类
        - 利用class关键字 后面跟上类名
    - 实例化对象
        - 利用new关键字();
    - 调用对象方法
        - ```$claName->fuName('name');```
- 回调类型
    - callback(回调)
- 特殊类型
    - null (不区分大小写)
        - 值就一个null
        - 在以下情况被认为是null
        - 变量被赋值为null
        - 尚未被赋值的变量
        - 被unset()的变量

    - 资源型
        - resource （资源）

###### 单引号与双引号
单引号```''```不会解析变量;
```php
$a = 'string';
$c = '123$a'; //string(5) "123$a"
```
双引号```""```会解析变量;
```php
$a = 'string';
$c = "123$a"; //string(9) "123string"
```

#### 数据类型的转换
在执行某些特定的运算时，php会自动对数据类型进行转换
```php
$a = 1+'string'; //1(int)
---
$a = 1+'20'; //21(int)
---
$a = 1+'20string'; //21(int)
---
$a = 1+'string20'; //1(int)
```
字符串在与数字```'+'```时会将字符串转换为```int```类型再运算，有意义的转换为相应的数字，没有意义转换为0；


转换成其他类型

- `(int)`(integer) - 转换为整形 integer
- `(bool)`(boolean) - 转换为布尔类型 boolean
- `(float)`(double)/(real) - 转换为浮点型 float
- `(string)` - 转换为字符串 string
- `(array)` - 转换为数组 array
- `(object)` - 转换为对象 object
- `(unset)` - 转换为NULL

```php
$num = '123'
(string) $num
```

表达式是任何有值的东西的基石
