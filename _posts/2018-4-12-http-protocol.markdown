---
layout: post
title: HTTP协议
date: 2018-4-12 00:00:00 +0300
description: HTTP # Add post description (optional)
img:   # Add image post (optional)
tags: [JS, HTTP] # add tag
---


#### HTTP协议特点
- 简单快速（统一资源符url）
- 灵活（通过改变头部数据类型可以传输不同数据类型）
- 无连接（连接一次就会断开）
- 无状态（任务完成后断开，服务端无法记住上一次连接的状态（身份））


##### HTTP报文组成部分
- 请求报文
    - 请求行（http方法，页面地址，http协议，版本）
    - 请求头（key，value，告诉服务端用哪些内容，类型）
    - 空行（下一个不再是请求头，接下来解析请求体）
    - 请求体

- 响应报文
    - 状态行（协议，版本，状态码）
    - 响应头
    - 空行
    - 响应体


#### HTTP方法
- GET（获取资源）

- POST（传输资源）

- PUT（更新资源）

- DELETE（删除资源）

- HEAD（获得报文首部）


#### POST和GET区别
- **GET在浏览器回退时是无害的，而POST会再次提交请求**

- GET产生的URL地址可以被收藏，而POST不可以

- **GET请求会被浏览器主动缓存，而POST不会，除非手动设置**

- GET请求只能进行url编码，而POST支持多种编码方式

- **GET请求参数会被完整保留在浏览器历史记录里，而POST中的参数不会被保留**

- **GET请求在URL中传输的参数是有长度限制的(约2kb），而POST没有限制**

- 对参数的数据类型，GET只接受ASCII字符，而POST没有限制

- GET比POST更不安全，因为参数直接暴露在URL上，所以不能用来传递敏感信息

- **GET参数通过URL传递，POST放在Request body中**


#### HTTP状态码

- 1xx: 指示信息 - 表示请求已被接收，继续处理

- 2xx: 成功 - 表示请求已被成功接收

- 3xx: 重定向 - 要完成请求必须进行更进一步的操作

- 4xx: 客户端错误 - 请求有语法错误或无法实现

- 5xx: 服务器错误 - 服务器未能实现合法的请求

```
200 OK： 客户端请求成功

206 Partial Content：客户发送了一个带有Range(范围，如0~10000字节)头的GET请求，服务器完成了它
//为请求头字节返回相应的文件请求头字节部分（服务器文件是完整的），如果video，audio播放时音频文件很大时会返回

301 Moved Permanently：所请求的页面已经转移至新的url

302 Found：所请求的页面已经临时转移至新的url

304 Not Modified：客户端有缓冲的文档发出了一个条件性的请求，服务器告诉客户，原来缓冲文档还可以继续使用

400 Bad Request：客户端请求有语法错误，不能被服务器所理解

401 Unauthorized：请求未经授权，这个状态代码必须和WWW-Authenticate报头域一起使用

403 Forbidden：对被请求页面的访问被禁止
//如某地址只能通过服务器访问，不能直接访问

404 Not Found：请求资源不存在

500 Internal Server Error：服务器发生不可预期的错误，原来缓冲的文档还可以继续使用

503 Server Unavailable：请求未完成，服务器临时过载或宕机，一段时间后即可恢复正常
```

#### HTTP持久连接

HTTP协议采用“请求-应答”模式，当使用普通模式，即非Keep-Alive（http1.1支持）模式时，每个请求/应答客户和服务器都要新建一个连接，完成之后立即断开连接（HTTP协议为无连接的协议）

当使用Keep-Alive模式（又称持久连接，连接重用）时，Keep-Alive功能使客户端到服务器的连接持续有效，当出现对服务器的后续请求时，Keep-Alive功能避免了建立或重新建立连接

#### 管线化

在使用持久连接的情况下，某个连接上消息的传递类似于

```
请求1->响应1->请求2->响应2->请求3->响应3
```

某个连接上的消息变成了类似这样(管线化)

```
请求1->请求2->请求3->响应1->响应2->响应3
```


- **管线化机制通过持久连接完成，仅HTTP/1.1支持此技术**

- **只有GET和HEAD请求可以进行管线化，而POST则有所限制**

- **初次创建连接时不应启动管线机制，因为对方（服务器）不一定支持HTTP/1.1版本的协议**

- 管线化不会影响响应到来的顺序，如上面的例子所示，响应返回的顺序并未改变

- HTTP/1.1要求服务器端支持管线化，但并不要求服务器端也对响应进行管线化处理，只是要求对于管线化的请求不失败即可

- 由于上面提到的服务端问题，开启管线化很可能并不会带来大幅度的性能提升，而且很多服务器端和代理程序对管线化的支持并不好，因此现代浏览器如Chrome何Firefox默认开启管线化支持

